# OpenID Connect configuration
#
# Each map block allows multiple values so that multiple IdPs can be supported,
# the $host variable is used as the default input parameter but can be changed.
#
map $host $oidc_authz_endpoint {
    api-okta.example.com https://f5nginx.okta.com/oauth2/v1/authorize;

    api-auth0.example.com https://nginxplusdemo.au.auth0.com/authorize;

    default "http://127.0.0.1:8080/auth/realms/master/protocol/openid-connect/auth";
    #www.example.com "https://my-idp/oauth2/v1/authorize";
}

map $host $oidc_token_endpoint {
    api-okta.example.com https://f5nginx.okta.com/oauth2/v1/token;

    api-auth0.example.com https://nginxplusdemo.au.auth0.com/oauth/token;

    default "http://127.0.0.1:8080/auth/realms/master/protocol/openid-connect/token";
}

map $host $oidc_jwt_keyfile {
    api-okta.example.com https://f5nginx.okta.com/oauth2/v1/keys;

    api-auth0.example.com https://nginxplusdemo.au.auth0.com/.well-known/jwks.json;

    default "http://127.0.0.1:8080/auth/realms/master/protocol/openid-connect/certs";
}

map $host $oidc_client {
    api-okta.example.com 0oapbzqznLMPq4uMM695;

    api-auth0.example.com o2JEXwqqF9V4dcpfXA3DPoTYlbFDI8Op;

    default "my-client-id";
}

map $host $oidc_pkce_enable {
    api-okta.example.com 1;

    api-auth0.example.com 1;

    default 0;
}

map $host $oidc_client_secret {
    default "my-client-secret";
}

map $host $oidc_scopes {
    default "openid+profile+email+offline_access";
}

map $host $oidc_logout_redirect {
    # Where to send browser after requesting /logout location. This can be
    # replaced with a custom logout page, or complete URL.
    api-okta.example.com "https://f5nginx.okta.com/oauth2/v1/logout?id_token_hint=$id_token&post_logout_redirect_uri=https://api-okta.example.com:443/_logout";
    default "https://nginxplusdemo.au.auth0.com/v2/logout?returnTo=https://api-auth0.example.com/_logout"; # Built-in, simple logout page
}

map $host $oidc_hmac_key {
    api-okta.example.com QTfdbD2YAkW+v3MMfETzGo20;

    api-auth0.example.com BcFoPdn4cqwGF1ybb/ieg6hO;

    # This should be unique for every NGINX instance/cluster
    default "ChangeMe";
}

map $proto $oidc_cookie_flags {
    http  "Path=/; SameSite=lax;"; # For HTTP/plaintext testing
    https "Path=/; SameSite=lax; HttpOnly; Secure;"; # Production recommendation
}

map $http_x_forwarded_port $redirect_base {
    ""      $proto://$host:$server_port;
    default $proto://$host:$http_x_forwarded_port;
}

map $http_x_forwarded_proto $proto {
    ""      $scheme;
    default $http_x_forwarded_proto;
}

# ADVANCED CONFIGURATION BELOW THIS LINE
# Additional advanced configuration (server context) in openid_connect.server_conf

# JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;

# Change timeout values to at least the validity period of each token type
keyval_zone zone=oidc_id_tokens:1M state=conf.d/oidc_id_tokens.json timeout=1h;
keyval_zone zone=refresh_tokens:1M state=conf.d/refresh_tokens.json timeout=8h;
keyval_zone zone=oidc_pkce:128K timeout=90s; # Temporary storage for PKCE code verifier.

keyval $cookie_auth_token $session_jwt zone=oidc_id_tokens;   # Exchange cookie for JWT
keyval $cookie_auth_token $refresh_token zone=refresh_tokens; # Exchange cookie for refresh token
keyval $request_id $new_session zone=oidc_id_tokens; # For initial session creation
keyval $request_id $new_refresh zone=refresh_tokens; # ''
keyval $pkce_id $pkce_code_verifier zone=oidc_pkce;

auth_jwt_claim_set $jwt_audience aud; # In case aud is an array
js_import oidc from conf.d/openid_connect.js;

# vim: syntax=nginx
